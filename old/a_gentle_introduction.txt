
# The Whole Point

## So what are you on about?

Since you're reading this sentence, it is a safe assumption that you are at least somewhat interested in the topics of NoSQL,New SQL, or Big Data. As such, you've opened this book to see what it will say. In brief, the book contends that the tools in these categories are worth investigation. They offer inexpensive solutions to pain points that most companies deal with on a daily basis. This book, while having some technical components, has little to say about how to data model on any of these platforms. Instead it focuses on providing a high level understanding of the terms and concepts found in the field as well as addressing using the tools in the enterprise. 

The purpose of this book is to provide a manager or developer with the general lay of the land. It seeks to look at the tools from the perspective of productivity, total cost of ownership, disaster recovery, dev-op relations and the like. These are the topics to consider when choosing a technology to back a production system. Having to get information on topics like that while having fancy acronyms thrown around like ACID, BASE, CAP, horizontal scaling, etc can cause even a person well-versed in the ideas lost. This book will cover those topics in simple English. 

The book does have a general pro-NoSQL bent. This is not to say, "Throw away your million dollar SQL systems." That would be just silly. It is to say, "There are other less expensive, functional tools that might solve your problem more quickly." Even with the economy looking better, keeping costs down is a great thing. Think of being an IT manager in a state government and being able to create applications on an infrastructure that costs just a few hundred thousand dollars to maintain per year rather than the millions required to just pay for licenses to the big database companies. 

## Why did you write this?

My background is in enterprise application development. I've spent the last 8+ years working as a consultant in multiple Fortune 1000 insurance companies as well as on the Medicare Fraud Detection system as a team lead. For most of this time, I've worked with the big three close sourced database: DB2, SQL Server and Oracle. On top of that kind of foundation I've worked on an agent sales and support portal, a time and resource tracking systems, and an underwriting rehab. 

While I worked on these projects I would also hang out at InfoQ.com, Hackers News (news.ycombinator.com) and Reddit Programming (reddit.com/r/programming). Two of these have a strong contigent of hipster programmers. These are the developers that enterprise developers enjoy mocking. Sometimes they deserve it what with skinny jeans and all. InfoQ is, by comparison, conservative. It does have a voice of innovation though. It was here that I first learned of NoSQL. And honestly I was rather unimpressed.

A confluence of two paradigms slowly saturated me during this time. The first was an open dialog concerning the tools. Many articles would talk about the benefit of horizontal scalability, being "web scale", productivity and schemaless designs. In the comments there would be someone to tempure my enthusiasm who said, "I tried such-and-such product in production. On, man! that was terrible. It broke all the time." 

Another somewhat related topic was the benefits of functional programming. So while some of the information seemed interesting and practical (mostly the functional programming tips), I would turn to my keyboard and mouse to create an ERD that I would email to the DBA to get into the DEV environment with an ETA of 14 hr from the time he read the R4C (request for change) but slow response didn't matter because I had to update some artifact in the meantime anyway. 

All of these topics became real to me during the creation of the Medicare Fraud Prevention System.

That project was one of just a few projects to use Hadoop in 2012 in the Centers for Medicare and Medicaid. The other projects had a rough start with the technology. My team took right too it. 

Vanilla Hadoop as the base (just download and go). Our developers wanted to think outside their normal roles. This made the dev-op divide almost nil. In just 3 months our team learned MapReduce and distributed evented application design to deliver a working production system that reduced the ETL of claim lines from 8 hours to 45 minutes and looked for fraud using many models. I credit this success to two factors: 1) intelligent, hardworking people with foresight to think outside the SQL box and 2) a tool-set that made such work relatively easy with a rudimentary knowledge of functional programming.

Today the system crunches over about 60 TB of data in 10 hours looking for fraud against 40+ models. Could Oracle do this? Maybe. Could Oracle do this for just $200k in hardware, no specialist DBA tweaking performance runs and no license fee? Nope.

It is when I realized that last sentence that I knew I needed to investigate these tools. At the same time my prior experience told me that I could not adopt a hipster attitude. I had to approach the technology from the perspective of what would I tell a client about these tools to make them 1) interested in changing the status quo and 2) help them realize that change. I knew I couldn't go to them and say, "Hey, big insurance company, you need to be web scale and handle the volume, uproot your entire data world view and get on the NoSQL bus. Oh and by the way, do it yesterday with all of the legacy." 

Unfortunately, when I went to look for resources along the more traditional ROI lines, I was not able to find a holistic analysis of the field. Integration solution companies have their own papers on the topic, but no one had a technology family assessment. I want to provide that holistic assessment.

## Watch out for the emotional
While at its simplest all we're talking about is storing 1's and 0's, the concept of changing a storage mechanism is often extremely emotional. It is common for someone to initially dismiss non-relational storage calmly at first. Pushing the topic will cause that cool exterior to quickly melt into name calling anger. 

For example, I told a friend about this book. He bristled at the thought of promoting any NoSQL technology. After I finished he jokingly asked to write an appendix where he would argue for why these tools are stupid and people should just get SQL Server. He started to add Oracle to the list, but retracted because it is too expensive. 

Don't be surprised if you get the same reaction from others. Even if you're just looking into the topic some people might try to dissuade you from simply reading. They will say the status quo is the best and any other approach is waste of time. 

Soldier on. Nothing quiets detractors like success. If you find that any of these tools will help solve your problems, either by themselves or in concert with relational data, hold your head up a little higher as you graciously accept an award for saving the company money. If you find that your problems are not alleviated by the tools or that your solution with them would be more complex, you're still better off since you have reason, not emotion, backing you. You will also find that your understanding of system design, architecture and practices is stronger for the exercise.

## What will I see along way?
Now that you got the general vision, we'll look at the scope. 

The book is divided into four sections. The first is introduction to the topic and its terms. This will be the most theoretical. You will learn how NoSQL is different from most relational databases. This involves such fun topics as ACID vs BASE, CAP. We are currently in the first section. 

The second section covers the major families of NoSQLs. You will learn the general ideas behind each family, how the system supports failure, how to get support, possible deployment opportunities, reporting, system integration and general provisioning guidelines. Added to the general information above you'll find a case study based on actual production execution. Where possible I've tried to find a balanced case study or two smaller studies where one was pro and one con. 

The third section turns the analysis from NoSQL to New SQL/Big Data. These two categories are treated as one since most New SQL products attempt to solve the scaling issues found of traditional SQL products while staying, as the name says, SQL based. Big Data often has SQL or SQL like interfaces.

Finally the book has a wrap up section. This briefly reiterates the material in the previous sections as a capstone.

You don’t have to read this book from cover-to-cover. Jump around if you want. For example, if you really want to know general arguments for NoSQL, skip to that section. Same is true for any family within it. This is your book, even if you downloaded it illegally. Manage it in a way that best enlightens you.

Now onto Theory!