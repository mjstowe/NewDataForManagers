# So Why NoSQL?
I don't presume to know much about your background at this point. So I'm going to start from this point: you are interested in the topic. No more. No less. 

## What is NoSQL
The first thing to know is that NoSQL is a catch all for anything that is not a stored in a relational database management system. While one could argue that they all boil down to key-value storage, that would be technically true, but not useful. In fact, as the concept matured even the "No" in NoSQL changed. It once meant "NO SQL!". Now it means "Not Only SQL". There are holdouts to the first meaning, but they are like burnt out hippies. No one really listens to them anymore.

The second thing to know is that it is fairly common to mix NoSQL tools together. Some companies even make their money by creating, maintaining and supporting hybrids of the systems will discuss in just a bit.

## The NoSQL Campers
People pick NoSQL tools for a variety of reasons, but they tend to fall into one of three camps or a combination of reasons. It is possible to perform most of the tasks listed below in a traditional database. Most of the time, though, it is difficult. NoSQL provides these features out-of-the-box either on purpose or as a side effect of their design. 

Quick aside, there is a fourth reason many companies like these tools: they are free. But their cost is _not_ the primary factor most of the time. There are great free traditional SQL databases like PostgreSQL. Free makes it easy to experiment and learn. It also adds a few points in the “pros” column when companies are considering piloting a project.

### Web Scalers
The first camp likes them because they are "web scale" (another vacuous tech term). An alternative phrase is “horizontal” scalability. This means that the database layer can have more machines thrown into it and you will get near linear performance. Double the cluster, double the capacity of the data layer. While it is possible to tune a relational database to perform like this, it cuts against the grain for most systems. 

Relational systems prefer to “vertically” scale. This means that if you want to get double the performance you look at the access patterns of your transactions and pick one or more parts of the server to upgrade. You might upgrade the disk for more or faster IOPs (SSDs for example). You might find that your CPU is a bottle neck so you get a faster one or one with more cores. You might find that you have to upgrade all of these components to get meaningful improvement. Doing this in a “enterprise class” way is expensive in both hardware and licensing terms. There is also a point where you run out of “up” in the vertical model. CPUs only get so fast in one box. A box can only access so much RAM. 

Horizontal scaling goes further, and possibly for less per dollar. First, as long as you’ve IP address available, you, at least in theory, have more room to grow capacity. Second, NoSQL servers are “commodity” rather than that “enterprise-grade”. This means that the servers are A) cheaper and B) expected to fail sooner than a server found in a traditional data warehouse. The “cheaper” part means that you can buy more servers with your budget. This makes the system both faster and more reliable. If you vertically scale your database, you have a *single* point of failure (and a costly one at that). If you lose one of many servers (and you’ve properly setup data copies), you’ve lost some collective processing power, but can still satisfy requests.

### No Schemers
The second camp likes them because of their flexible data modeling. There is no rigid schema definition as there are in relational databases. This has lead to the phrase “schema less” data.

The flexibility allows developers to align their data storage structures to the application data structures. A colleague liked to say that 80% of coding is just transforming data. This is especially true when developers try to cross the divide between modern Object Oriented Programming (OOP) and SQL. This is called the “object relational mismatch”. It occurs because objects are complex and relational models are simple. 

A Person object can have a name, birth date, gender and a set of addresses like their primary residence and a vacation home. This group of information is referred to as an aggregate in OOP.

A relational database model has two tables (perhaps more). The PERSON table houses the person’s system id, name, birth date and gender. The ADDRESS table houses all of the information for an address plus the system id for the person that owns it. Getting this information out of the database require looking at two tables via a join. 

Code has to query, then translate that records from the database into the Person object *and* into the Address objects *and* load the Addresses into the Person.

There are tools to automate this work. However, as with other forms of automation there are trade-offs here. Sometimes these tool generate less than ideal SQL. Sometimes interacting with the tool is just as taxing as interacting with the raw SQL transformations.

The flexible data modeling abilities of every NoSQL instance reduces the mismatch. For example, rather than having two tables and a join operation, a developer can save the Person object directly into the data store.

The flexible data model also makes schema updates easier when compared to a traditional database. Now a development team can just add a field to a model or remove it. If an old record had a removed field, it is simply ignored. If a new field is added to the record collections, old models get an empty value without having to spin through perhaps hundreds of thousands of old records to just add the field. On top of all this, adding a field is no longer a “stop the world” event requiring everyone to get out of the database. Columns can come, they can go, but users can solider on.

Another benefit of flexible data modeling is that developers can iterate on a design against live data without having to involve another team. As alluded to earlier, many organizations silo the application development team and the database development team. Even if the company is working a more agile way with a DBA assigned to a project, the development team has to wait for the DBA to make a change. Depending on the DBA, it could take a bit. Sometimes this can be worked around through the use of a stub database layer in the application, but delays cause issues. Most NoSQL allows the addition of a field to a data model without much if any oversight.

I want to take a moment to point out that “schema less” does not mean no schema. It means no rigid schema. In theory, it is possible to have a Person record with attributes like “make” and “model” while all the other records don’t have that value. This has freaked some people out. In practice, this doesn’t happen *unless* it makes sense (for example sentient robo-humans). At that point including odd attributes is part of the domain.

### Rapid Writers
The third camp likes the technology because of how it handles data volume and safety. First, let’s look at how these systems handle large volumes of data compared with relational databases.

Let’s assume that both a NoSQL server and a relational database can only handle one write at a time. While each server is working on writing its data, more writes come in. These writes go into a queue. We can think of this as people standing in line to checkout at a store. When there are few customers wanting to checkout, a line moves fast. 

The trouble comes when there are a bunch of customers all wanting to checkout at the same time. We’ve all been in that situation. We get annoyed. We see this with our application clients when the database takes a while to write because it’s working on other people’s data too.

Stores solve this problem by opening another lane. The next customer in line simply moves to that lane. The queue essentially halves. People get out quicker. Money goes into the store faster. Everyone is happy.

NoSQL’s horizontal scaling approach is essentially like adding another register. We can handle twice the writes by adding another computer. The vertical scaling approach is like hiring a more productive register worker. They can get get people out faster than a normal employ, but it is hard to believe that one person could check out faster than 5 other open registers at once.

In reality, both servers can handle more than one write at a time (at least most can). The horizontal scaling behavior still holds true. You can get a large, expensive single server to work faster or you can get a few, inexpensive servers to break up the work amongst themselves.

The same is true for reads. If you are querying for some set of records, you can look faster if you can look in more than one place at a time. 

Data safety is dependent upon the exact family and make of NoSQL under discussion. Presuming that the storage is durable, NoSQL makes mirroring copies of the database easier than most relational databases. These products provide the concept of replicas. Like in SCI-FI, a replica is a copy of the data. Data stores that offer this ability allow you to tune the number of replicas at various levels. When a server goes down, it does not necessarily take the data with it.

Now replication comes with a cost in hardware. But since the servers are often only $3-5k, it might be worth the cost.

### A Funny Thing Happened on the Way to Maturity 
There is a meta-level design found in modern architectures that supports NoSQL advocates even though it is not from them. Service Oriented Architecture (SOA) was all the buzz about 4-5 years ago. It's since matured into a Generally Accepted Architectural Principle (GAAP). 

This design advocated placing a service interface in front of your data store. A client system uses that interface. It doesn't care how the back end stores or retrieve its information, just that it does and does so as per the terms of the service contract. 

This changes the traditional paradigm. Databases are less important as a *integration platform*. Where you saw a database as a single point of reference for multiple applications, reporting, and perhaps even the whole enterprise, you now see service calls everywhere. The database was displaced by the enterprise service bus. As a result of this the key factor is loading and reading information from services as quickly as possible. NoSQL out-of-the-box supports quick reads and writes that conform to a SOA approach better than an untuned relational database.

## What NoSQL Is Not

###Standard Provisos

This is the point where I tell you what you should always know, but I, as an write, have to tell you. 

* NoSQL tools are not a silver bullet to your problems. 
* They are not a vehicle that will take carry you to success with little effort. 
* They do not confer the powers of “web scale” to your application by simply being in the stack. 

As luis_a_espinal wrote in a Slashdot comment, "You can NoSQL the shit out of your solution, but if your software and system architecture is not scalable, then having NoSQL will mean chicken poop as solutions go." Just as with any other system, all the share holders have to understand the requirements and general system design to scale an application for speed, availability or whatever metric you need to meet for your SLA. NoSQL tools provide you with a lot of power out-of-the-box for responsiveness. You have to know when to use them. The purpose of this book is to help you know when to use them.

### The Usual Data Models

Standard practice in the relational world is normalize everything. This is when the designer isolates attributes into tables that limit the amount of redundant data. Joins allow a combination of tables to represent so entity of interest.

There are few benefits to normalization. First, it makes updates safe because the data is not repeated (DRY). If you have to update the address information for a person, you only have to update one place. Second, querying is quicker because there are more rows per page of memory. Finally, tables are smaller. One issue in some relational models is that when tables start to become large, a 10+ GB, they start to slow down.

The prior example of the Person and Address table is a partially normalized design. To really normalize it, to make it 3rd normal form, we just have to add another table named PersonAddress. At this point we’ve allowed the Person table to concern itself with the attributes for a person. The Address table is only for addresses. The PersonAddress table allows a person to have 0 or more Addresses and an Address to have 0 or more Persons. 

Experienced relational modelers know when to stop normalization. The initial Person table design lacked the PersonAddress table because I modeled the address as having one-and-only-one owner. Thus I could put the Person id in the Address record to get a simple, quick join.

Just as the relational model has degrees of normalization, so, to does NoSQL. The difference is that NoSQL tends to be more denormalized than relational models from the start.

The reason for denormalizing with NoSQL is due the the schema less nature. Relational tables only have simple columns. They can be strings, numbers, booleans, but they are can’t be another complex type (with out extending the database in a proprietary way). NoSQL can have complex types. It is possible, and possibly advisable for a Person record to have a list of Addresses in it. If I commonly need the address information for the person whenever I work with a person, why not just store it right there. Since two or more data structures are in one place, the performance penalty of joins goes away.

Denormalizing can increase disk usage. In the past this was a concern. Disks were small and expensive. Times have changed. Disk inexpensive and large. This is true even at the consumer level. A house can have a 4 TB SAN for $400. That includes the case, power supply, drives and OS.

Developers need to have put their prior normalization skills aside while they learn new techniques. Their prior experiences should information their present learning.

### ACID Compliant, But It Might Not Matter